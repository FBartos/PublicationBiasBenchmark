% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/measures_compute.R
\name{compute_measures}
\alias{compute_measures}
\title{Compute Multiple Performance measures for a DGM}
\usage{
compute_measures(
  dgm_name,
  methods,
  method_settings,
  measures = NULL,
  verbose = TRUE,
  power_test_type = "p_value",
  power_threshold = NULL,
  estimate_col = "estimate",
  true_effect_col = "mean_effect",
  ci_lower_col = "ci_lower",
  ci_upper_col = "ci_upper",
  p_value_col = "p_value",
  bf_col = "BF",
  convergence_col = "convergence",
  method_replacements = NULL,
  method_setting_replacements = NULL,
  n_repetitions = 1000,
  overwrite = FALSE,
  conditions = NULL,
  path = NULL
)
}
\arguments{
\item{dgm_name}{Character string specifying the name of the DGM dataset to download.}

\item{methods}{Character vector of method names}

\item{method_settings}{Character vector of method settings, must be same length as methods}

\item{measures}{Character vector of measures to compute. If NULL, computes all standard measures.}

\item{verbose}{Logical indicating whether to print progress messages}

\item{power_test_type}{Character string specifying the test type for power computation:
"p_value" (default) or "bayes_factor"}

\item{power_threshold}{Numeric threshold for power computation. For p-values,
default is 0.05 (reject if p < 0.05). For Bayes factors, default is 10
(reject if BF > 10, indicating strong evidence for H1)}

\item{estimate_col}{Character string specifying the column name containing parameter estimates. Default is "estimate"}

\item{true_effect_col}{Character string specifying the column name in conditions data frame containing true effect sizes. Default is "mean_effect"}

\item{ci_lower_col}{Character string specifying the column name containing lower confidence interval bounds. Default is "ci_lower"}

\item{ci_upper_col}{Character string specifying the column name containing upper confidence interval bounds. Default is "ci_upper"}

\item{p_value_col}{Character string specifying the column name containing p-values. Default is "p_value"}

\item{bf_col}{Character string specifying the column name containing Bayes factors. Default is "BF"}

\item{convergence_col}{Character string specifying the column name containing convergence indicators. Default is "convergence"}

\item{overwrite}{Logical indicating whether to overwrite existing results. If FALSE (default), will skip computation for method-measure combinations that already exist}

\item{conditions}{data.frame with specification of the condition for a given condition. Defaults to FALSE, the internally stored conditions file under the DGM name is used.}

\item{path}{Character string specifying the directory path where the datasets/results/measures
should be saved. Defaults to the location specified via
\code{PublicationBiasBenchmark.get_option("simulation_directory")}. The objects are stored
in dgm_name/datasets, dgm_name/results, dgm_name/measures subfolders.}
}
\value{
Invisible list of computed measures data frames
}
\description{
This is a high-level wrapper function that computes multiple performance
measures for a Data Generating Mechanism (DGM) and saves the results to CSV files.
It provides a clean and extensible interface for computing standard simulation
performance measures.
}
\examples{
\dontrun{
# Compute all standard measures for no_bias DGM
results <- compute_measures(
  dgm_name = "no_bias",
  methods = c("RMA", "PET", "PEESE", "PETPEESE"),
  method_settings = c("default", "default", "default", "default")
)

# Compute only specific measures
results <- compute_measures(
  dgm_name = "no_bias",
  methods = c("RMA", "PET"),
  method_settings = c("default", "default"),
  measures = c("bias", "mse", "coverage")
)

# Compute measures with Bayes factor based power (BF > 6 for significance)
results <- compute_measures(
  dgm_name = "no_bias",
  methods = c("RMA", "PET"),
  method_settings = c("default", "default"),
  power_test_type = "bayes_factor",
  power_threshold = 6
)

# Compute measures with custom p-value threshold
results <- compute_measures(
  dgm_name = "no_bias",
  methods = c("RMA", "PET"),
  method_settings = c("default", "default"),
  power_test_type = "p_value",
  power_threshold = 0.01
)

# Include convergence measure
results <- compute_measures(
  dgm_name = "no_bias",
  methods = c("RMA", "PET"),
  method_settings = c("default", "default"),
  measures = c("bias", "mse", "coverage", "power", "convergence")
)

# Use custom column names
results <- compute_measures(
  dgm_name = "no_bias",
  methods = c("RMA", "PET"),
  method_settings = c("default", "default"),
  estimate_col = "my_estimate",
  true_effect_col = "true_value",
  ci_lower_col = "lower_ci",
  ci_upper_col = "upper_ci",
  p_value_col = "pval",
  bf_col = "bayes_factor",
  convergence_col = "converged"
)
}

}
