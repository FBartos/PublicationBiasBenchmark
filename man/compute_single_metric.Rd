% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_performance_metrics.R
\name{compute_single_metric}
\alias{compute_single_metric}
\title{Compute Performance Metrics for a DGM}
\usage{
compute_single_metric(
  dgm_name,
  metric_name,
  methods,
  method_settings,
  conditions,
  results_folder,
  metric_fun,
  metric_mcse_fun,
  power_test_type = "pvalue",
  power_threshold = NULL,
  estimate_col = "estimate",
  true_effect_col = "mean_effect",
  ci_lower_col = "ci_lower",
  ci_upper_col = "ci_upper",
  pvalue_col = "p_value",
  bf_col = "BF",
  convergence_col = "convergence",
  overwrite = FALSE,
  output_folder = NULL,
  ...
)
}
\arguments{
\item{dgm_name}{Character string specifying the DGM name}

\item{metric_name}{Name of the metric to compute (e.g., "bias", "mse")}

\item{methods}{Character vector of method names}

\item{method_settings}{Character vector of method settings, must be same length as methods}

\item{conditions}{Data frame of conditions from dgm_conditions()}

\item{results_folder}{Path to folder containing pre-computed results}

\item{metric_fun}{Function to compute the metric}

\item{metric_mcse_fun}{Function to compute the MCSE for the metric}

\item{power_test_type}{Character string specifying the test type for power computation:
"pvalue" (default) or "bayes_factor"}

\item{power_threshold}{Numeric threshold for power computation. For p-values,
default is 0.05 (reject if p < 0.05). For Bayes factors, default is 10
(reject if BF > 10, indicating strong evidence for H1)}

\item{estimate_col}{Character string specifying the column name containing parameter estimates. Default is "estimate"}

\item{true_effect_col}{Character string specifying the column name in conditions data frame containing true effect sizes. Default is "mean_effect"}

\item{ci_lower_col}{Character string specifying the column name containing lower confidence interval bounds. Default is "ci_lower"}

\item{ci_upper_col}{Character string specifying the column name containing upper confidence interval bounds. Default is "ci_upper"}

\item{pvalue_col}{Character string specifying the column name containing p-values. Default is "p_value"}

\item{bf_col}{Character string specifying the column name containing Bayes factors. Default is "BF"}

\item{convergence_col}{Character string specifying the column name containing convergence indicators. Default is "convergence"}

\item{overwrite}{Logical indicating whether to overwrite existing results. If FALSE (default), will skip computation for method-metric combinations that already exist}

\item{output_folder}{Path to folder where results should be saved. Only used when overwrite = FALSE to check for existing files}

\item{...}{Additional arguments passed to metric functions}
}
\value{
Data frame with computed metrics and MCSEs
}
\description{
This function provides a modular and extensible way to compute performance
metrics for Data Generating Mechanisms (DGMs). It handles different types
of metrics and automatically determines the required arguments for each metric
function.
}
\examples{
\dontrun{
# Get conditions for a DGM
conditions <- dgm_conditions("no_bias")

# Compute bias for specific methods
bias_results <- compute_single_metric(
  dgm_name = "no_bias",
  metric_name = "bias",
  methods = c("RMA", "PET"),
  method_settings = c("default", "default"),
  conditions = conditions,
  results_folder = "simulations",
  metric_fun = bias,
  metric_mcse_fun = bias_mcse
)

# Compute power using Bayes factors
power_results <- compute_single_metric(
  dgm_name = "no_bias",
  metric_name = "power",
  methods = c("RMA", "PET"),
  method_settings = c("default", "default"),
  conditions = conditions,
  results_folder = "simulations",
  metric_fun = power,
  metric_mcse_fun = power_mcse,
  power_test_type = "bayes_factor",
  power_threshold = 6
)

}

}
