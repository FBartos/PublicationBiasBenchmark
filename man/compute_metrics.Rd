% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_performance_metrics.R
\name{compute_metrics}
\alias{compute_metrics}
\title{Compute Multiple Performance Metrics for a DGM}
\usage{
compute_metrics(
  dgm_name,
  methods,
  method_settings,
  results_folder = "simulations",
  output_folder = "results",
  metrics = NULL,
  verbose = TRUE,
  power_test_type = "pvalue",
  power_threshold = NULL,
  estimate_col = "estimate",
  true_effect_col = "mean_effect",
  ci_lower_col = "ci_lower",
  ci_upper_col = "ci_upper",
  pvalue_col = "p_value",
  bf_col = "BF",
  convergence_col = "convergence",
  overwrite = FALSE
)
}
\arguments{
\item{dgm_name}{Character string specifying the DGM name}

\item{methods}{Character vector of method names}

\item{method_settings}{Character vector of method settings, must be same length as methods}

\item{results_folder}{Path to folder containing pre-computed results}

\item{output_folder}{Path to folder where results should be saved}

\item{metrics}{Character vector of metrics to compute. If NULL, computes all standard metrics.}

\item{verbose}{Logical indicating whether to print progress messages}

\item{power_test_type}{Character string specifying the test type for power computation:
"pvalue" (default) or "bayes_factor"}

\item{power_threshold}{Numeric threshold for power computation. For p-values,
default is 0.05 (reject if p < 0.05). For Bayes factors, default is 10
(reject if BF > 10, indicating strong evidence for H1)}

\item{estimate_col}{Character string specifying the column name containing parameter estimates. Default is "estimate"}

\item{true_effect_col}{Character string specifying the column name in conditions data frame containing true effect sizes. Default is "mean_effect"}

\item{ci_lower_col}{Character string specifying the column name containing lower confidence interval bounds. Default is "ci_lower"}

\item{ci_upper_col}{Character string specifying the column name containing upper confidence interval bounds. Default is "ci_upper"}

\item{pvalue_col}{Character string specifying the column name containing p-values. Default is "p_value"}

\item{bf_col}{Character string specifying the column name containing Bayes factors. Default is "BF"}

\item{convergence_col}{Character string specifying the column name containing convergence indicators. Default is "convergence"}

\item{overwrite}{Logical indicating whether to overwrite existing results. If FALSE (default), will skip computation for method-metric combinations that already exist}
}
\value{
Invisible list of computed metrics data frames
}
\description{
This is a high-level wrapper function that computes multiple performance
metrics for a Data Generating Mechanism (DGM) and saves the results to CSV files.
It provides a clean and extensible interface for computing standard simulation
performance metrics.
}
\examples{
\dontrun{
# Compute all standard metrics for no_bias DGM
results <- compute_metrics(
  dgm_name = "no_bias",
  methods = c("RMA", "PET", "PEESE", "PETPEESE"),
  method_settings = c("default", "default", "default", "default"),
  results_folder = "simulations",
  output_folder = "results"
)

# Compute only specific metrics
results <- compute_metrics(
  dgm_name = "no_bias",
  methods = c("RMA", "PET"),
  method_settings = c("default", "default"),
  results_folder = "simulations",
  output_folder = "results",
  metrics = c("bias", "mse", "coverage")
)

# Compute metrics with Bayes factor based power (BF > 6 for significance)
results <- compute_metrics(
  dgm_name = "no_bias",
  methods = c("RMA", "PET"),
  method_settings = c("default", "default"),
  results_folder = "simulations",
  output_folder = "results",
  power_test_type = "bayes_factor",
  power_threshold = 6
)

# Compute metrics with custom p-value threshold
results <- compute_metrics(
  dgm_name = "no_bias",
  methods = c("RMA", "PET"),
  method_settings = c("default", "default"),
  results_folder = "simulations",
  output_folder = "results",
  power_test_type = "pvalue",
  power_threshold = 0.01
)

# Include convergence metric
results <- compute_metrics(
  dgm_name = "no_bias",
  methods = c("RMA", "PET"),
  method_settings = c("default", "default"),
  results_folder = "simulations",
  output_folder = "results",
  metrics = c("bias", "mse", "coverage", "power", "convergence")
)

# Use custom column names
results <- compute_metrics(
  dgm_name = "no_bias",
  methods = c("RMA", "PET"),
  method_settings = c("default", "default"),
  results_folder = "simulations",
  output_folder = "results",
  estimate_col = "my_estimate",
  true_effect_col = "true_value",
  ci_lower_col = "lower_ci",
  ci_upper_col = "upper_ci",
  pvalue_col = "pval",
  bf_col = "bayes_factor",
  convergence_col = "converged"
)
}

}
