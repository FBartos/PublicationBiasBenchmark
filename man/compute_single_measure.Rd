% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/measures_compute.R
\name{compute_single_measure}
\alias{compute_single_measure}
\title{Compute Performance Measures for a DGM}
\usage{
compute_single_measure(
  dgm_name,
  measure_name,
  methods,
  method_settings,
  conditions,
  measure_fun,
  measure_mcse_fun,
  power_test_type = "p_value",
  power_threshold = NULL,
  estimate_col = "estimate",
  true_effect_col = "mean_effect",
  ci_lower_col = "ci_lower",
  ci_upper_col = "ci_upper",
  p_value_col = "p_value",
  bf_col = "BF",
  convergence_col = "convergence",
  method_replacements = NULL,
  method_setting_replacements = NULL,
  n_repetitions = 1000,
  overwrite = FALSE,
  path = NULL,
  ...
)
}
\arguments{
\item{dgm_name}{Character string specifying the DGM name}

\item{measure_name}{Name of the measure to compute (e.g., "bias", "mse")}

\item{methods}{Character vector of method names}

\item{method_settings}{Character vector of method settings, must be same length as methods}

\item{conditions}{Data frame of conditions from dgm_conditions()}

\item{measure_fun}{Function to compute the measure}

\item{measure_mcse_fun}{Function to compute the MCSE for the measure}

\item{power_test_type}{Character string specifying the test type for power computation:
"p_value" (default) or "bayes_factor"}

\item{power_threshold}{Numeric threshold for power computation. For p-values,
default is 0.05 (reject if p < 0.05). For Bayes factors, default is 10
(reject if BF > 10, indicating strong evidence for H1)}

\item{estimate_col}{Character string specifying the column name containing parameter estimates. Default is "estimate"}

\item{true_effect_col}{Character string specifying the column name in conditions data frame containing true effect sizes. Default is "mean_effect"}

\item{ci_lower_col}{Character string specifying the column name containing lower confidence interval bounds. Default is "ci_lower"}

\item{ci_upper_col}{Character string specifying the column name containing upper confidence interval bounds. Default is "ci_upper"}

\item{p_value_col}{Character string specifying the column name containing p-values. Default is "p_value"}

\item{bf_col}{Character string specifying the column name containing Bayes factors. Default is "BF"}

\item{convergence_col}{Character string specifying the column name containing convergence indicators. Default is "convergence"}

\item{method_replacements}{Character vector of method names that shall be used as a replacement in the case of non-convergence.
Defaults to \code{NULL}, i.e., omitting repetitions without converged results on method-by-method bases.
If multiple elements are specified, these replacement are applied consecutive in case the previous replacements also failed to converged.}

\item{method_setting_replacements}{Character vector of method settings that shall be used as a replacement in the case of non-convergence.}

\item{n_repetitions}{Number of repetitions in each condition. Neccessary method replacement. Defaults to \code{1000}.}

\item{overwrite}{Logical indicating whether to overwrite existing results. If FALSE (default), will skip computation for method-measure combinations that already exist}

\item{path}{Character string specifying the directory path where the datasets/results/measures
should be saved. Defaults to the location specified via
\code{PublicationBiasBenchmark.get_option("simulation_directory")}. The objects are stored
in dgm_name/datasets, dgm_name/results, dgm_name/measures subfolders.}

\item{...}{Additional arguments passed to measure functions}
}
\value{
Data frame with computed measures and MCSEs
}
\description{
This function provides a modular and extensible way to compute performance
measures (PM) for Data Generating Mechanisms (DGMs). It handles different types
of measures and automatically determines the required arguments for each measure
function.
}
\examples{
\dontrun{
# Get conditions for a DGM
conditions <- dgm_conditions("no_bias")

# Compute bias for specific methods
bias_results <- compute_single_measure(
  dgm_name = "no_bias",
  measure_name = "bias",
  methods = c("RMA", "PET"),
  method_settings = c("default", "default"),
  conditions = conditions,
  results_folder = "simulations",
  measure_fun = bias,
  measure_mcse_fun = bias_mcse
)

# Compute power using Bayes factors
power_results <- compute_single_measure(
  dgm_name = "no_bias",
  measure_name = "power",
  methods = c("RMA", "PET"),
  method_settings = c("default", "default"),
  conditions = conditions,
  results_folder = "simulations",
  measure_fun = power,
  measure_mcse_fun = power_mcse,
  power_test_type = "bayes_factor",
  power_threshold = 6
)

}

}
